<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Ka Ka Blog]]></title>
  <link href="http://huxinghai1988.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://huxinghai1988.github.com/"/>
  <updated>2017-03-11T16:36:43+08:00</updated>
  <id>http://huxinghai1988.github.com/</id>
  <author>
    <name><![CDATA[kaka]]></name>
    <email><![CDATA[huxinghai1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphQL与Ruby的使用]]></title>
    <link href="http://huxinghai1988.github.com/blog/2017/02/25/graphql-ruby/"/>
    <updated>2017-02-25T11:58:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2017/02/25/graphql-ruby</id>
    <content type="html"><![CDATA[<blockquote><p>GraphQL是Facekbook开源API数据查询语言，随着现在业务场景越来越复杂，一站式开发会产生工作协调低下、项目结构混乱的一些问题，现在比较流行前后端分离应用开发，前端和后台约定数据格式通过Ajax与API进行数据交互这样职责清晰、项目逻辑专注，而GraphQL就是一个数据抽象层，包括数据格式、数据关联、查询方式定义, GraphQL也并不是一个具体的后端编程框架，它只是使后端API能够提供更丰富的数据结构和更多复杂多变的查询方式的一种规范。</p></blockquote>

<h3>ruby graphql简单例子</h3>

<ul>
<li>GraphQL::ObjectType.define 对象类型是解析GraphQL语法的一种数据关系映射</li>
<li>GraphQL::Relay::Mutation.define 对象数据变更定义</li>
<li>GraphQL::Schema.define 数据主入口，包括输入/输出</li>
</ul>


<p><a href="https://github.com/huxinghai1988/graphql-ruby-demo">例子地址</a></p>

<h4>基本类型定义</h4>

<p>```ruby
module Types
  UserType = GraphQL::ObjectType.define do</p>

<pre><code>name "User"
description "A User"

field :id,   !types.ID
field :name, !types.String
</code></pre>

<p>  end
end</p>

<p>module Types
  CommentType = GraphQL::ObjectType.define do</p>

<pre><code>name "Comment"
description "A Comment"

field :id,   !types.ID
field :body, !types.String
field :user, UserType
</code></pre>

<p>  end
end</p>

<p>module Types
  PostType = GraphQL::ObjectType.define do</p>

<pre><code>name "Post"
description "A Post"

field :id,   !types.ID
field :body, !types.String
field :user, UserType
field :comments, types[CommentType]
</code></pre>

<p>  end
end</p>

<p>module Types
  QueryType = GraphQL::ObjectType.define do</p>

<pre><code>name "Query"
description "The query root for this schema"

field :post, PostType do
  argument :id, types.ID
  resolve -&gt;(obj, args, ctx) {
    Post.find(args[:id])
  }
end

field :posts, types[PostType] do 
  resolve -&gt;(obj, args, ctx) {
    Post.all
  }
end
</code></pre>

<p>  end
end</p>

<p>module Types
  MutationType = GraphQL::ObjectType.define do</p>

<pre><code>name "Mutation"

field :addPost, field: Mutations::AddPost.field
</code></pre>

<p>  end
end
<code>
</code>ruby
module Mutations</p>

<p>  AddPost = GraphQL::Relay::Mutation.define do</p>

<pre><code>name "AddPost"

input_field :body, !types.String
input_field :userId, !types.ID

return_field :post, Types::PostType

resolve -&gt;(object, inputs, ctx) {
  post = Post.create!(body: inputs[:body], user_id: inputs[:userId])
  { post: post }
}
</code></pre>

<p>  end</p>

<p>end
<code>
</code>ruby
StarWarsSchema = GraphQL::Schema.define do
  query Types::QueryType
  mutation Types::MutationType
end
```</p>

<h4>语法执行</h4>

<p>```ruby</p>

<h1>查询所有文章</h1>

<p>query_string = %|{
  posts {</p>

<pre><code>body
user{ id name }
comments{ id body }
</code></pre>

<p>  }
}|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{</h1>

<h1>"data": {</h1>

<h1>"posts": [</h1>

<h1>{</h1>

<h1>"body": "article content",</h1>

<h1>"user": { "id": "1", "name": "kaka" },</h1>

<h1>"comments": []</h1>

<h1>}</h1>

<h1>]</h1>

<h1>}</h1>

<h1>}</h1>

<h1>查询单篇文章</h1>

<p>query_string = %|{
  post(id: 1) {</p>

<pre><code>body
user{ id name }
comments{ id body }
</code></pre>

<p>  }
}|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{</h1>

<h1>"data": {</h1>

<h1>"posts": {</h1>

<h1>"body": "article content",</h1>

<h1>"user": { "id": "1", "name": "kaka" },</h1>

<h1>"comments": []</h1>

<h1>}</h1>

<h1>}</h1>

<h1>}</h1>

<h1>创建文章</h1>

<p>query_string = %|
  mutation addPost {</p>

<pre><code>addPost(input: {userId: 1, body: "A GraphQL server implementation for Ruby"}){
  post{
    body
  }
}
</code></pre>

<p>  }|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{"data"=>{"addPost"=>{"post"=>{"body"=>"A GraphQL server implementation for Ruby"}}}}</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby链式调用安全符号(&.)]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/10/18/operator-in-ruby/"/>
    <updated>2016-10-18T22:21:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/10/18/operator-in-ruby</id>
    <content type="html"><![CDATA[<blockquote><p>Ruby-2.3.0版本添加安全操作符<code>&amp;</code>, 其实我们之前可能是用<code>try</code>处理这种安全调用，但毕竟try是依赖Rails的ActiveSupport Module，&amp;与try之间还是有些区别的;</p></blockquote>

<h4>使用场景</h4>

<p>在代码中我们防止nil对象调用报错，我们一般会使用下面这样的逻辑判断来避免错误</p>

<p><code>ruby
if account &amp;&amp; account.owner &amp;&amp; account.owner.address
...
end
</code></p>

<p>如果我们includes ActiveSupport我们会这样调用</p>

<p><code>ruby
if account.try(:owner).try(:address)
...
end
</code></p>

<p>使用&amp;符号</p>

<pre><code>account&amp;.owner&amp;.address
</code></pre>

<p>其实&amp;与try区别在于&amp;前面方法返回nil就会终止链式调用, try则是检测最后的方法是否存在如果不存在就返回nil</p>

<p>```ruby
account = Account.new(owner: Object.new)
account.owner.address</p>

<h1>=> NoMethodError: undefined method `address' for #&lt;Object:0x00559996b5bde8></h1>

<p>account &amp;&amp; account.owner &amp;&amp; account.owner.address</p>

<h1>=> NoMethodError: undefined method <code>address' for #&lt;Object:0x00559996b5bde8&gt;</code></h1>

<p>account.try(:owner).try(:address)</p>

<h1>=> nil</h1>

<p>account&amp;.owner&amp;.address</p>

<h1>=> NoMethodError: undefined method <code>address' for #&lt;Object:0x00559996b5bde8&gt;</code></h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Ruby MonitorMixin注意的坑]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/08/20/ruby-monitor-mixin/"/>
    <updated>2016-08-20T21:40:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/08/20/ruby-monitor-mixin</id>
    <content type="html"><![CDATA[<p>初次使用MonitorMixin控制同步执行的时候一不小心就踩坑了，当你include的时候如果你的class定义了initialize方法
请调用<code>super</code>否则会报<code>undefined method `lock' for nil:NilClass</code>错。</p>

<p>```ruby</p>

<pre><code>class Number
  attr_accessor :n

  include MonitorMixin

  def initialize(*args)
    @n = 0
    super() # 调用MonitorMixin#initialize
  end

  def increase(x)
    synchronize do 
      @n = @n + x
      puts("#{@n}, #{x}")
    end
  end
end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Capitan ruby-oci8 2.1.4 安装报错]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/01/01/el-capitan-ruby-oci8/"/>
    <updated>2016-01-01T16:31:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/01/01/el-capitan-ruby-oci8</id>
    <content type="html"><![CDATA[<p>升级MacOS El Capitan后安装oracle的ruby-oci8 2.1.4版本gem包报错信息如下</p>

<p>```
  Installing ruby-oci8 2.1.4 with native extensions</p>

<p>  Gem::Ext::BuildError: ERROR: Failed to build gem native extension.</p>

<p>  /Users/huxinghai/.rvm/rubies/ruby-2.0.0-p643/bin/ruby -r ./siteconf20151231-1172-1r9gor0.rb extconf.rb
  checking for load library path...
  DYLD_LIBRARY_PATH is not set.
  checking for cc... ok
  checking for gcc... yes
  checking for LP64... yes
  checking for sys/types.h... yes
  checking for ruby header... ok
  Get the version of Oracle from SQL<em>Plus... 1120
  try  -I/opt/oracle/instantclient_11_2/rdbms/public
  checking for oci.h... no
  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo
  checking for oci.h... no
  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo -I/opt/oracle/instantclient_11_2/network/public
  checking for oci.h... no
  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo -I/opt/oracle/instantclient_11_2/network/public -I/opt/oracle/instantclient_11_2/plsql/public
  checking for oci.h... no
  </em><strong> extconf.rb failed </strong>*
  Could not create Makefile due to some reason, probably lack of necessary
  libraries and/or headers.
```</p>

<p>这里面有一个重要的信息<code>DYLD_LIBRARY_PATH is not set</code>但是我在<code>~/.bash_profile</code>文件里面配置了DYLD_LIBRARY_PATH路径，我在终端<code>env | grep DYLD_LIBRARY_PATH</code>但是为空，后来我在终端<code>export DYLD_LIBRARY_PATH=/opt/oracle/instantclient_11_2</code>还是为空，但是export其它的环境变量都有值，后来查资料看到一个El Capitan SIP（System Integrity Protection）这个词，google了一个SIP才明白是El Capitan版本的一个安全策略, SIP把DYLD_LIBRARY_PATH保护起来了，所以的把SIP关闭才可以正常设置DYLD_LIBRARY_PATH, 关闭SIP后export DYLD_LIBRARY_PATH变量就成功了。</p>

<p><a href="http://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11">关闭SIP步骤</a></p>

<ol>
<li>重启系统, 在启动时候按<code>Command+R</code>进入恢复模式图形界面</li>
<li>点击<code>使用工具</code> > <code>Terminal</code></li>
<li>在终端输入<code>csrutil disable</code>命令按回车，会提示是否成功</li>
<li>重启系统</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[元编程Ruby2.0 Module#refine]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/11/08/module-refine/"/>
    <updated>2015-11-08T00:00:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/11/08/module-refine</id>
    <content type="html"><![CDATA[<p>没有看元编程第二版之前还不知道Module有<strong><em>refine</em></strong>特效，可以将一个class重新打开定义方法
然后使用using生效，这样不会影响原有class，下面我们看看这个案例：</p>

<p>```ruby</p>

<pre><code>module FooBar
  refine String do
    def hello
      puts "#{self} says : Hello, world"
    end
  end
end

class Bar
  using FooBar
  attr_reader :user

  def initialize(user)
    @user = user
  end

  def say
    user.hello
  end
end

Bar.new('ruby').say
String.new.say
</code></pre>

<p>```</p>

<p>String.new.say调用会报错， 因为say只在Bar类里面生效。</p>
]]></content>
  </entry>
  
</feed>
