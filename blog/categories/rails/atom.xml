<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Ka Ka Blog]]></title>
  <link href="http://huxinghai1988.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://huxinghai1988.github.com/"/>
  <updated>2016-11-20T13:19:28+08:00</updated>
  <id>http://huxinghai1988.github.com/</id>
  <author>
    <name><![CDATA[kaka]]></name>
    <email><![CDATA[huxinghai1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用MySQL存储emoji表情符号]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/09/05/mysql-store-emoji-in-rails-app/"/>
    <updated>2016-09-05T22:40:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/09/05/mysql-store-emoji-in-rails-app</id>
    <content type="html"><![CDATA[<p>一个emoji是4bytes的存储空间, 如果你的MySQL使用的是utf8编码格式那emoji符号存储将会截断字符因为utf8一个字符只是
3bytes的存储空间</p>

<p>例子：</p>

<p>```
mysql> SET NAMES utf8;
Query OK, 0 rows affected (0,00 sec)</p>

<p>mysql> INSERT INTO messages (message) VALUES ('What a nice emoji😀!');
Query OK, 1 row affected, 1 warning (0,00 sec)</p>

<p>mysql> SHOW WARNINGS;
+---------+------+---------------------------------------------------------------------------+
| Level   | Code | Message                                                                   |
+---------+------+---------------------------------------------------------------------------+
| Warning | 1366 | Incorrect string value: '\xF0\x9F\x98\x80!' for column 'message' at row 1 |
+---------+------+---------------------------------------------------------------------------+
1 row in set (0,00 sec)</p>

<p>mysql> SELECT message FROM messages;
+-------------------+
| message           |
+-------------------+
| What a nice emoji |
+-------------------+
1 row in set (0,00 sec)
```</p>

<p>使用utf8mb4格式可以存储emoji字符，但是<a href="https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html">MySQL 5.5.3</a>版本才引进utf8mb4编码格式，所以数据库要更新到这个版本或者更高的, 用utf8mb4之后我们经常会遇到<code>Mysql2::Error: Specified key was too long; max key length is 767 bytes</code>错误，这是因为Innodb的索引长度限制767bytes, (varchar(255) * 4bytes)这个是会超过767bytes</p>

<p>如果你的字段类型长度不能减少，那只能是指定行的格式来解决，在创建表时指定<a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_large_prefix">ROW_FORMAT=DYNAMIC</a>参数可以从767bytes限制提升到3072bytes, 这样就是会牺牲一点空间</p>

<p>例如:</p>

<p><code>sql
CREATE TABLE `bookmarks` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL,
  `title` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `site_info_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC
</code></p>

<p>如果使用的是Rails的migration的话就如下：</p>

<p>```ruby
class CreateArticles &lt; ActiveRecord::Migration[5.0]
  def change</p>

<pre><code>create_table :articles, options: 'ROW_FORMAT=DYNAMIC' do |t|
  t.string :title, null: false, limit: 300
  t.datetime :published
  t.string :author
  t.text :description
  t.text :content

  t.timestamps
end

add_index :articles, :title, :unique =&gt; true
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails调用oracle的存储过程]]></title>
    <link href="http://huxinghai1988.github.com/blog/2014/08/21/oracle-call-stored-procedure/"/>
    <updated>2014-08-21T00:41:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2014/08/21/oracle-call-stored-procedure</id>
    <content type="html"><![CDATA[<p>调用方式如下：</p>

<pre><code>cursor = ActiveRecord::Base.connection.raw_connection.parse("BEGIN MYPROC(:age, :name, :fathers_age, :capital_name); END;")
cursor.bind_param(:name, 'akshay')
cursor.bind_param(:age, '20')
cursor.bind_param(:fathers_age, nil, Fixnum)
cursor.bind_param(:capital_name, nil, String, 20)
cursor.exec()
p cursor[:fathers_age], cursor[:capital_name]


require 'sequel'
db = Sequel.connect(:adapter=&gt;'oracle', :host=&gt;'localhost', :database=&gt;'db_name', :user=&gt;'test', :password=&gt;'test')
db.execute("begin MYPROC(:age, :name, :fathers_age, :capital_name); end;", {:arguments =&gt; [[20, "integer"], ["akshay", "string"], [nil, "integer"], [nil, "string"]]}) { |cursor| [cursor[3], cursor[4]] }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongoid 使用ajax 无刷新上传]]></title>
    <link href="http://huxinghai1988.github.com/blog/2012/12/08/ajax-upload-avatar/"/>
    <updated>2012-12-08T14:43:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2012/12/08/ajax-upload-avatar</id>
    <content type="html"><![CDATA[<p>使用以下的gem包:</p>

<pre>
    gem 'carrierwave'
    gem 'carrierwave-mongoid', :require => 'carrierwave/mongoid'
    gem 'mini_magick'
    gem 'rack-raw-upload'
</pre>




<p>
然后前端js，本来使用<a href='http://fineuploader.com'>fineuploader</a>，但是在ie8下面有问题,原因是ajax send 的时候头部<br />
信息类型<code>Content-Type: multipart/form-data</code>,而其它浏览头部类型正常，但是官方说支持ie 7以上，但是弄了很久，还是不行<br />
决定使用<a href='https://github.com/Valums-File-Uploader/file-uploader.git'>file-uploader</a>前端，这使用方式很雷同，使用file-uploader在ie 8下面，但当服务器返回状态不等于200时，会出现错误，错误信息说iframe.contentDocument 没有权限！通过其它状态处理错误信息!
</p>

]]></content>
  </entry>
  
</feed>
