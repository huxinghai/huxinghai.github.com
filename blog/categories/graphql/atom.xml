<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: graphql | Ka Ka Blog]]></title>
  <link href="http://huxinghai1988.github.com/blog/categories/graphql/atom.xml" rel="self"/>
  <link href="http://huxinghai1988.github.com/"/>
  <updated>2017-03-11T16:36:43+08:00</updated>
  <id>http://huxinghai1988.github.com/</id>
  <author>
    <name><![CDATA[kaka]]></name>
    <email><![CDATA[huxinghai1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GraphQL与Ruby的使用]]></title>
    <link href="http://huxinghai1988.github.com/blog/2017/02/25/graphql-ruby/"/>
    <updated>2017-02-25T11:58:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2017/02/25/graphql-ruby</id>
    <content type="html"><![CDATA[<blockquote><p>GraphQL是Facekbook开源API数据查询语言，随着现在业务场景越来越复杂，一站式开发会产生工作协调低下、项目结构混乱的一些问题，现在比较流行前后端分离应用开发，前端和后台约定数据格式通过Ajax与API进行数据交互这样职责清晰、项目逻辑专注，而GraphQL就是一个数据抽象层，包括数据格式、数据关联、查询方式定义, GraphQL也并不是一个具体的后端编程框架，它只是使后端API能够提供更丰富的数据结构和更多复杂多变的查询方式的一种规范。</p></blockquote>

<h3>ruby graphql简单例子</h3>

<ul>
<li>GraphQL::ObjectType.define 对象类型是解析GraphQL语法的一种数据关系映射</li>
<li>GraphQL::Relay::Mutation.define 对象数据变更定义</li>
<li>GraphQL::Schema.define 数据主入口，包括输入/输出</li>
</ul>


<p><a href="https://github.com/huxinghai1988/graphql-ruby-demo">例子地址</a></p>

<h4>基本类型定义</h4>

<p>```ruby
module Types
  UserType = GraphQL::ObjectType.define do</p>

<pre><code>name "User"
description "A User"

field :id,   !types.ID
field :name, !types.String
</code></pre>

<p>  end
end</p>

<p>module Types
  CommentType = GraphQL::ObjectType.define do</p>

<pre><code>name "Comment"
description "A Comment"

field :id,   !types.ID
field :body, !types.String
field :user, UserType
</code></pre>

<p>  end
end</p>

<p>module Types
  PostType = GraphQL::ObjectType.define do</p>

<pre><code>name "Post"
description "A Post"

field :id,   !types.ID
field :body, !types.String
field :user, UserType
field :comments, types[CommentType]
</code></pre>

<p>  end
end</p>

<p>module Types
  QueryType = GraphQL::ObjectType.define do</p>

<pre><code>name "Query"
description "The query root for this schema"

field :post, PostType do
  argument :id, types.ID
  resolve -&gt;(obj, args, ctx) {
    Post.find(args[:id])
  }
end

field :posts, types[PostType] do 
  resolve -&gt;(obj, args, ctx) {
    Post.all
  }
end
</code></pre>

<p>  end
end</p>

<p>module Types
  MutationType = GraphQL::ObjectType.define do</p>

<pre><code>name "Mutation"

field :addPost, field: Mutations::AddPost.field
</code></pre>

<p>  end
end
<code>
</code>ruby
module Mutations</p>

<p>  AddPost = GraphQL::Relay::Mutation.define do</p>

<pre><code>name "AddPost"

input_field :body, !types.String
input_field :userId, !types.ID

return_field :post, Types::PostType

resolve -&gt;(object, inputs, ctx) {
  post = Post.create!(body: inputs[:body], user_id: inputs[:userId])
  { post: post }
}
</code></pre>

<p>  end</p>

<p>end
<code>
</code>ruby
StarWarsSchema = GraphQL::Schema.define do
  query Types::QueryType
  mutation Types::MutationType
end
```</p>

<h4>语法执行</h4>

<p>```ruby</p>

<h1>查询所有文章</h1>

<p>query_string = %|{
  posts {</p>

<pre><code>body
user{ id name }
comments{ id body }
</code></pre>

<p>  }
}|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{</h1>

<h1>"data": {</h1>

<h1>"posts": [</h1>

<h1>{</h1>

<h1>"body": "article content",</h1>

<h1>"user": { "id": "1", "name": "kaka" },</h1>

<h1>"comments": []</h1>

<h1>}</h1>

<h1>]</h1>

<h1>}</h1>

<h1>}</h1>

<h1>查询单篇文章</h1>

<p>query_string = %|{
  post(id: 1) {</p>

<pre><code>body
user{ id name }
comments{ id body }
</code></pre>

<p>  }
}|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{</h1>

<h1>"data": {</h1>

<h1>"posts": {</h1>

<h1>"body": "article content",</h1>

<h1>"user": { "id": "1", "name": "kaka" },</h1>

<h1>"comments": []</h1>

<h1>}</h1>

<h1>}</h1>

<h1>}</h1>

<h1>创建文章</h1>

<p>query_string = %|
  mutation addPost {</p>

<pre><code>addPost(input: {userId: 1, body: "A GraphQL server implementation for Ruby"}){
  post{
    body
  }
}
</code></pre>

<p>  }|</p>

<p>result_hash = StarWarsSchema.execute(query_string)</p>

<h1>{"data"=>{"addPost"=>{"post"=>{"body"=>"A GraphQL server implementation for Ruby"}}}}</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
