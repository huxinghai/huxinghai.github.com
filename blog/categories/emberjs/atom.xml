<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emberjs | Ka Ka Blog]]></title>
  <link href="http://huxinghai1988.github.com/blog/categories/emberjs/atom.xml" rel="self"/>
  <link href="http://huxinghai1988.github.com/"/>
  <updated>2016-11-20T13:19:28+08:00</updated>
  <id>http://huxinghai1988.github.com/</id>
  <author>
    <name><![CDATA[kaka]]></name>
    <email><![CDATA[huxinghai1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ember使用express做后台API服务]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/06/18/ember-nodejs-express-backend-api/"/>
    <updated>2016-06-18T15:00:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/06/18/ember-nodejs-express-backend-api</id>
    <content type="html"><![CDATA[<p>使用Ember CLI的<code>ember generate server</code>命令创建server,模块会生成<code>server/index.js</code>文件，该服务是基于Express框架</p>

<pre><code>ember generate server
</code></pre>

<p>server/index.js默认内容</p>

<p>```js</p>

<pre><code>module.exports = function(app) {
  var globSync   = require('glob').sync;
  var mocks      = globSync('./mocks/**/*.js', { cwd: __dirname }).map(require);
  var proxies    = globSync('./proxies/**/*.js', { cwd: __dirname }).map(require);

  // Log proxy requests
  var morgan  = require('morgan');
  app.use(morgan('dev'));

  mocks.forEach(function(route) { route(app); });
  proxies.forEach(function(route) { route(app); });

};
</code></pre>

<p>```</p>

<p>从内容分析可以看出，其实这个服务可以让前端更好的mock API的数据做测试，这样在工作配合上前端不需要等后端API调式
可以使用server模拟数据；</p>

<p>也可以自定义API数据接口</p>

<p>```js</p>

<pre><code>// server/index.js
var bodyParser = require('body-parser');

module.exports = function(app) {

  app.use(bodyParser.json({ type: "application/json" }));

  app.get('/api/items/:item', function(req, res) {
    const item = localdb.find('item', req.params.item);
    res.send({ item: item });
  });
}
</code></pre>

<p>```</p>

<p>运行服务</p>

<pre><code>ember server
</code></pre>

<p>我们就可以通过<code>http://localhost:4200/api/items/1</code>API获取数据</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ember容器注入对象]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/05/19/ember-inject-container/"/>
    <updated>2016-05-19T22:31:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/05/19/ember-inject-container</id>
    <content type="html"><![CDATA[<blockquote><p>Ember注入是用来将一个对象注入到一个容器里面去，让容器可以访问对象，容器是指<code>route</code>、<code>controller</code>、<code>helper</code>。</p></blockquote>

<p>使用用例：</p>

<p>```js</p>

<pre><code>// app/services/session.js
export default Ember.Service.extend({
  isAuthenticated: false
});

// app/initializes/inject-session.js
export function initialize(application) {
  application.inject('route', 'service:session');
}

export default {
  name: 'session',
  initialize: initialize
}


// app/routes/products.js
export default Ember.Route.extend({

  model(){
    this.session
  },
  setupController(controller, model){
    this.session
    ...
  }
});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ember-cli入门指南]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/03/10/ember-cli-guide/"/>
    <updated>2016-03-10T23:02:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/03/10/ember-cli-guide</id>
    <content type="html"><![CDATA[<h4>ember-cli是什么？</h4>

<p>  ember-cli是一个ember.js提供的一个快速开发命令行工具，可以通过命令构建、运行、测试、部署，很方便
前后端分离，而且ember有很丰富的<a href="https://www.emberaddons.com/">addon</a>生态社区，把重用的东西组件化，
项目开发完成用build命令会输出一个index.html和编译好的js、css文件这个输出就是静态的，我们可以用nginx或node express服务器来展现编译好的静态资源，其实ember-cli的命令行工具设计的跟Rails Command相似，addon就是ruby的gem包可能
是因为ember的开发也是Rails核心贡献开发，所以很多设计思想互通。</p>

<h4>命令介绍</h4>

<pre><code>//构建项目
$ ember new todo

//运行项目
$ ember s

//生成路由
$ ember generate route products/new

//运行测试
$ ember test

//安装addon
$ ember install &lt;addon-name&gt;
</code></pre>

<h4>目录结构</h4>

<pre><code>app/    =&gt; 主要包含了models、controller、minxin、routes、template、index.html、application所有项目相关逻辑代码多会在这里面
dist/   =&gt; 编译输出目录里面index.html和js、css
public/   =&gt; 存放一些静态文件例如：图片、字体
tests/    =&gt; 测试逻辑
bower_components/    =&gt; bower包依赖源文件
node_modules/     =&gt; npm包依赖源文件
vendor/   =&gt; 自己扩展依赖
ember-cli-build.js  =&gt; 指定编译配置文件
bower.json   =&gt; bower依赖配置
package.json    =&gt; npm依赖配置
</code></pre>

<h4>config/environment.js</h4>

<pre><code>module.exports = function(environment) {
  var ENV = {
    modulePrefix: 'todo',
    environment: environment,
    baseURL: '/',
    locationType: 'hash',  
    contentSecurityPolicy: {
      'connect-src': "'self' * localhost:3000",
      'img-src': "'self' * data:",
      'style-src': "'self' 'unsafe-inline'"
    }
  };

  if(environment === 'development') {
  }

  if (environment === 'test') {
    ENV.APP.rootElement = '#ember-testing';
  }

  if (environment === 'production') {
  }

  return ENV;
};
</code></pre>

<h4>bower与npm区别</h4>

<p>  bower是管理前端库、npm是管理nodo开发使用库，前者是扁平化后者是树形结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emberjs2 自定义adapter方法与json序列化model]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/09/22/emberjsguide/"/>
    <updated>2015-09-22T21:50:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/09/22/emberjsguide</id>
    <content type="html"><![CDATA[<ol>
<li><p>自定义adapter请求服务器</p>

<p> 有时候model CURD 满足不了我们的需求，需要自己定义方法请求服务器，我们可以把这种方法定义adapter
代码如下：</p>

<pre><code>App.UserAdapter = App.ApplicationAdapter.extend({
  createRelation: function(opts){
    var url = [this.urlPrefix(), "users", "/pass"].join("/")
    return this.ajax(url, "POST", {data: opts})  
  }
})
</code></pre>

<p>controller调用</p>

<pre><code>var adapter = this.store.adapterFor("user");
adapter.createRelation({status: 1}).then(function(){
  // success
}, function(){
  // catch
})
</code></pre></li>
<li><p>json序列化model</p></li>
</ol>


<p>  <code>
  this.store.push(this.store.normalize("user", {id: 1, name: 'xxxxxxxxx'}))
 </code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emberjs 2.0 遇到一个坑]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/09/12/emberjs-pit/"/>
    <updated>2015-09-12T11:52:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/09/12/emberjs-pit</id>
    <content type="html"><![CDATA[<p>最近项目使用emberjs 2.0版本，本身用2.0是比较纠结的事，由于之前就是只闻其术，不见其码，而且emberjs 1.x版本到2.0 做了一次无痛升级，之前用backbone框架感觉有些概念还是一样的，先说说用的emberjs 第一个坑贴代码。</p>

<p>```js
  //controller js 文件</p>

<p>  actions: {</p>

<pre><code>save: function(x){
  var tag = this.store.createRecord("tag", {name: this.get("newName")})

  tag.save().then(function(that){
    return function(){
      that.set("newName", "")
    }
  }(this), function(that){
    return function(r){
      tag.rolledBack()
      tag.unloadRecord()
      that.set("errors", r.errors)
    }
  }(this))
}
</code></pre>

<p>  }
```</p>

<p>tag 当我不管成功与失败template 多会加载这数据，我想在save失败不加载到template所以要加一个<strong>rolledBack</strong>和<strong>unloadRecord</strong>失败的时候就不加载了。</p>
]]></content>
  </entry>
  
</feed>
