<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ka Ka Blog]]></title>
  <link href="http://huxinghai1988.github.com/atom.xml" rel="self"/>
  <link href="http://huxinghai1988.github.com/"/>
  <updated>2016-09-07T21:53:53+08:00</updated>
  <id>http://huxinghai1988.github.com/</id>
  <author>
    <name><![CDATA[kaka]]></name>
    <email><![CDATA[huxinghai1988@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用MySQL存储emoji表情符号]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/09/05/mysql-store-emoji-in-rails-app/"/>
    <updated>2016-09-05T22:40:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/09/05/mysql-store-emoji-in-rails-app</id>
    <content type="html"><![CDATA[<p>一个emoji是4bytes的存储空间, 如果你的MySQL使用的是utf8编码格式那emoji符号存储将会截断字符因为utf8一个字符只是
3bytes的存储空间</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; SET NAMES utf8;
</span><span class='line'>Query OK, 0 rows affected (0,00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; INSERT INTO messages (message) VALUES ('What a nice emoji😀!');
</span><span class='line'>Query OK, 1 row affected, 1 warning (0,00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; SHOW WARNINGS;
</span><span class='line'>+---------+------+---------------------------------------------------------------------------+
</span><span class='line'>| Level   | Code | Message                                                                   |
</span><span class='line'>+---------+------+---------------------------------------------------------------------------+
</span><span class='line'>| Warning | 1366 | Incorrect string value: '\xF0\x9F\x98\x80!' for column 'message' at row 1 |
</span><span class='line'>+---------+------+---------------------------------------------------------------------------+
</span><span class='line'>1 row in set (0,00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; SELECT message FROM messages;
</span><span class='line'>+-------------------+
</span><span class='line'>| message           |
</span><span class='line'>+-------------------+
</span><span class='line'>| What a nice emoji |
</span><span class='line'>+-------------------+
</span><span class='line'>1 row in set (0,00 sec)</span></code></pre></td></tr></table></div></figure>


<p>使用utf8mb4格式可以存储emoji字符，但是<a href="https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-3.html">MySQL 5.5.3</a>版本才引进utf8mb4编码格式，所以数据库要更新到这个版本或者更高的, 用utf8mb4之后我们经常会遇到<code>Mysql2::Error: Specified key was too long; max key length is 767 bytes</code>错误，这是因为Innodb的索引长度限制767bytes, (varchar(255) * 4bytes)这个是会超过767bytes</p>

<p>如果你的字段类型长度不能减少，那只能是指定行的格式来解决，在创建表时指定<a href="http://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_large_prefix">ROW_FORMAT=DYNAMIC</a>参数可以从767bytes限制提升到3072bytes, 这样就是会牺牲一点空间</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">bookmarks</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">url</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_bin</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">title</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_bin</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">user_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">created_at</span><span class="o">`</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">updated_at</span><span class="o">`</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">site_info_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">25</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span> <span class="k">COLLATE</span><span class="o">=</span><span class="n">utf8mb4_bin</span> <span class="n">ROW_FORMAT</span><span class="o">=</span><span class="k">DYNAMIC</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用的是Rails的migration的话就如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateArticles</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">[</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:articles</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="s1">&#39;ROW_FORMAT=DYNAMIC&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">null</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="mi">300</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="ss">:published</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:author</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:description</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Ruby MonitorMixin注意的坑]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/08/20/ruby-monitor-mixin/"/>
    <updated>2016-08-20T21:40:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/08/20/ruby-monitor-mixin</id>
    <content type="html"><![CDATA[<p>初次使用MonitorMixin控制同步执行的时候一不小心就踩坑了，当你include的时候如果你的class定义了initialize方法
请调用<code>super</code>否则会报<code>undefined method `lock' for nil:NilClass</code>错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Number</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:n</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">MonitorMixin</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@n</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span> <span class="c1"># 调用MonitorMixin#initialize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@n</span> <span class="o">=</span> <span class="vi">@n</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>      <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@n</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ember使用express做后台API服务]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/06/18/ember-nodejs-express-backend-api/"/>
    <updated>2016-06-18T15:00:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/06/18/ember-nodejs-express-backend-api</id>
    <content type="html"><![CDATA[<p>使用Ember CLI的<code>ember generate server</code>命令创建server,模块会生成<code>server/index.js</code>文件，该服务是基于Express框架</p>

<pre><code>ember generate server
</code></pre>

<p>server/index.js默认内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">globSync</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;glob&#39;</span><span class="p">).</span><span class="nx">sync</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mocks</span>      <span class="o">=</span> <span class="nx">globSync</span><span class="p">(</span><span class="s1">&#39;./mocks/**/*.js&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">cwd</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">require</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">proxies</span>    <span class="o">=</span> <span class="nx">globSync</span><span class="p">(</span><span class="s1">&#39;./proxies/**/*.js&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">cwd</span><span class="o">:</span> <span class="nx">__dirname</span> <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">require</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Log proxy requests</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">morgan</span>  <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;morgan&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">morgan</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">mocks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span> <span class="nx">route</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">proxies</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">route</span><span class="p">)</span> <span class="p">{</span> <span class="nx">route</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>从内容分析可以看出，其实这个服务可以让前端更好的mock API的数据做测试，这样在工作配合上前端不需要等后端API调式
可以使用server模拟数据；</p>

<p>也可以自定义API数据接口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// server/index.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;application/json&quot;</span> <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/items/:item&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">localdb</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="nx">item</span><span class="o">:</span> <span class="nx">item</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行服务</p>

<pre><code>ember server
</code></pre>

<p>我们就可以通过<code>http://localhost:4200/api/items/1</code>API获取数据</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ember容器注入对象]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/05/19/ember-inject-container/"/>
    <updated>2016-05-19T22:31:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/05/19/ember-inject-container</id>
    <content type="html"><![CDATA[<blockquote><p>Ember注入是用来将一个对象注入到一个容器里面去，让容器可以访问对象，容器是指<code>route</code>、<code>controller</code>、<code>helper</code>。</p></blockquote>

<p>使用用例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app/services/session.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">isAuthenticated</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// app/initializes/inject-session.js</span>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">initialize</span><span class="p">(</span><span class="nx">application</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">application</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="s1">&#39;route&#39;</span><span class="p">,</span> <span class="s1">&#39;service:session&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;session&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="nx">initialize</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// app/routes/products.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">model</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">session</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">setupController</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">session</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[intersection-of-two-arrays]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/05/19/intersection-of-two-arrays/"/>
    <updated>2016-05-19T22:07:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/05/19/intersection-of-two-arrays</id>
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection.</p>

<p>Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>

<p>Note:
Each element in the result must be unique.
The result can be in any order.</p>

<pre><code># @param {Integer[]} nums1
# @param {Integer[]} nums2
# @return {Integer[]}
def intersection(nums1, nums2)
  nums1 &amp; nums2
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Vowels of a String]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/05/14/leet-code-reverse-vowels/"/>
    <updated>2016-05-14T17:51:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/05/14/leet-code-reverse-vowels</id>
    <content type="html"><![CDATA[<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>

<p>Example 1:
Given s = &#8220;hello&#8221;, return &#8220;holle&#8221;.</p>

<p>Example 2:
Given s = &#8220;leetcode&#8221;, return &#8220;leotcede&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @param {String} s</span>
</span><span class='line'><span class="c1"># @return {String}</span>
</span><span class='line'><span class="k">def</span> <span class="nf">reverse_vowels</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="sr">/(a|e|i|o|u)/i</span> <span class="o">=~</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="p">?</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="p">:</span> <span class="n">s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">tmp</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">fdiv</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">v</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">tmp</span><span class="o">[</span><span class="n">tmp</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="n">a</span><span class="o">[</span><span class="n">v</span><span class="o">]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">b</span><span class="o">]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&amp;&amp;</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当你的Sublime打开项目卡顿的时候修改配置]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/03/13/sublime-folder-exclude-patterns/"/>
    <updated>2016-03-13T22:28:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/03/13/sublime-folder-exclude-patterns</id>
    <content type="html"><![CDATA[<p>菜单路径<code>Preferences -&gt; Settings-User</code></p>

<pre><code>"folder_exclude_patterns": [".svn", ".git", ".hg", "CVS", "node_modules", "bower_components", "tmp"]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise warden报错401]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/03/12/devise-authenticate-401/"/>
    <updated>2016-03-12T23:41:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/03/12/devise-authenticate-401</id>
    <content type="html"><![CDATA[<p>今天遇到一个特别的问题在项目里面使用devise应用到User与Admin, 因为User是可以用手机号码和Email登录的,
而Admin只能邮件登录，结果User可以正常登录，但是Admin应该也可以正常登录，但是就是报401密码错误，经过翻看源码发现一个很好的工具，找到出现问题的原因</p>

<pre><code>(byebug) Devise::Models.check_fields!(Admin)
*** Devise::Models::MissingAttribute Exception: The following attribute(s) is (are) missing on your model: phone
</code></pre>

<p>因为我在devise.rb配置了</p>

<pre><code>config.authentication_keys = [:email, :phone]
</code></pre>

<p>所以我要在Admin模型里面指定authentication_keys</p>

<pre><code>devise :database_authenticatable, :registerable,
     :recoverable, :rememberable, :trackable, :validatable,
     :authentication_keys =&gt; [:email]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ember-cli入门指南]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/03/10/ember-cli-guide/"/>
    <updated>2016-03-10T23:02:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/03/10/ember-cli-guide</id>
    <content type="html"><![CDATA[<h4>ember-cli是什么？</h4>

<p>  ember-cli是一个ember.js提供的一个快速开发命令行工具，可以通过命令构建、运行、测试、部署，很方便
前后端分离，而且ember有很丰富的<a href="https://www.emberaddons.com/">addon</a>生态社区，把重用的东西组件化，
项目开发完成用build命令会输出一个index.html和编译好的js、css文件这个输出就是静态的，我们可以用nginx或node express服务器来展现编译好的静态资源，其实ember-cli的命令行工具设计的跟Rails Command相似，addon就是ruby的gem包可能
是因为ember的开发也是Rails核心贡献开发，所以很多设计思想互通。</p>

<h4>命令介绍</h4>

<pre><code>//构建项目
$ ember new todo

//运行项目
$ ember s

//生成路由
$ ember generate route products/new

//运行测试
$ ember test

//安装addon
$ ember install &lt;addon-name&gt;
</code></pre>

<h4>目录结构</h4>

<pre><code>app/    =&gt; 主要包含了models、controller、minxin、routes、template、index.html、application所有项目相关逻辑代码多会在这里面
dist/   =&gt; 编译输出目录里面index.html和js、css
public/   =&gt; 存放一些静态文件例如：图片、字体
tests/    =&gt; 测试逻辑
bower_components/    =&gt; bower包依赖源文件
node_modules/     =&gt; npm包依赖源文件
vendor/   =&gt; 自己扩展依赖
ember-cli-build.js  =&gt; 指定编译配置文件
bower.json   =&gt; bower依赖配置
package.json    =&gt; npm依赖配置
</code></pre>

<h4>config/environment.js</h4>

<pre><code>module.exports = function(environment) {
  var ENV = {
    modulePrefix: 'todo',
    environment: environment,
    baseURL: '/',
    locationType: 'hash',  
    contentSecurityPolicy: {
      'connect-src': "'self' * localhost:3000",
      'img-src': "'self' * data:",
      'style-src': "'self' 'unsafe-inline'"
    }
  };

  if(environment === 'development') {
  }

  if (environment === 'test') {
    ENV.APP.rootElement = '#ember-testing';
  }

  if (environment === 'production') {
  }

  return ENV;
};
</code></pre>

<h4>bower与npm区别</h4>

<p>  bower是管理前端库、npm是管理nodo开发使用库，前者是扁平化后者是树形结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测服务器网络traceroute工具收集]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/02/21/devops-traceroute/"/>
    <updated>2016-02-21T00:09:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/02/21/devops-traceroute</id>
    <content type="html"><![CDATA[<p>traceroute追踪网络路由工具，可以很详细的看到与服务器之间的每跳路由与访问状态与时间</p>

<h4>网关出现问题</h4>

<pre><code>$ traceroute 10.1.2.5                                               
traceroute to 10.1.2.5 (10.1.2.5), 64 hops max, 52 byte packets
 1  192.168.1.1 (192.168.1.1)  1.265 ms  0.643 ms  0.660 ms
 2  10.1.1.1 (10.1.1.1)  1.166 ms  1.250 ms  1.115 ms
 3  218.19.177.1 (218.19.177.1)  3.438 ms  5.116 ms  2.960 ms
 4  58.62.222.33 (58.62.222.33)  5.073 ms  3.072 ms  3.620 ms
 5  * * *
 6  * * *
 7  * * *
 8  * * *
</code></pre>

<p>追踪当前电脑与10.1.2.5之间的每一跳路由，从上面信息可以看到了第5步时候变成星号说明
问题出在网关，你需要检查这条路线，排查不能再两个网络中传递数据包的原因。</p>

<h4>连接网关超时</h4>

<pre><code>$ traceroute 10.1.2.5                                               
traceroute to 10.1.2.5 (10.1.2.5), 64 hops max, 52 byte packets
 1  192.168.1.1 (192.168.1.1)  1.265 ms  0.643 ms  0.660 ms
 2  10.1.1.1 (10.1.1.1)  3006.47 ms !H  3006.77 ms !H  3007 ms
</code></pre>

<p>这个例子中连接网关超时，所有主机可能已经宕机</p>

<h4>诊断网路慢</h4>

<pre><code>$ traceroute yohoo.cn
traceroute to 212.82.102.24 (212.82.102.24), 64 hops max, 52 byte packets
 1  192.168.1.1 (192.168.1.1)  2.370 ms  1.435 ms  0.616 ms
 2  10.1.1.1 (10.1.1.1)  1.140 ms  3.270 ms  1.317 ms
 3  218.19.177.1 (218.19.177.1)  3.620 ms  3.441 ms  5.840 ms
 4  183.56.38.189 (183.56.38.189)  17.443 ms  2.369 ms  3.142 ms
 5  121.8.223.5 (121.8.223.5)  5.467 ms  8.928 ms
    61.144.3.10 (61.144.3.10)  4.603 ms
 6  * 202.97.35.246 (202.97.35.246)  106.464 ms  113.461 ms
 7  202.97.91.234 (202.97.91.234)  107.816 ms
    202.97.60.42 (202.97.60.42)  109.543 ms
    202.97.34.90 (202.97.34.90)  105.858 ms
 8  202.97.58.38 (202.97.58.38)  613.035 ms  408.620 ms  314.500 ms
</code></pre>

<p>这是yahoo服务器，我们可以通过看每一跳之间的时间得出假设，当你到达第6跳时从4ms跳跃到113ms这说明已经离开本区域了是从中国
雅虎服务器到美国雅虎服务器跳跃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[服务器性能问题检测工具收集]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/01/28/op-performance/"/>
    <updated>2016-01-28T20:55:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/01/28/op-performance</id>
    <content type="html"><![CDATA[<p>通过下面这些工具更好的对机器问题进行诊断</p>

<h4>uptime</h4>

<pre><code>$ uptime                                                        
21:07:48 up 16 days,  7:04,  1 user,  load average: 5.34, 4.70, 4.43
</code></pre>

<p>这个命令可以快速查看机器的负载情况，这些数据表示等待CPU资源的进程和堵塞不可以中断IO进程(进程状态为D)的数量
这些数据可以让我们对系统有一个宏观的了解。</p>

<p>解读输出：以逗号隔开第一部分是系统运行的时间，第二部分是登录用户，第三部分是负载平均量。负载量越低意味着你的系统性能越好</p>

<h4>dmesg</h4>

<pre><code>$ dmesg                                                        
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Linux version 3.2.0-24-generic (buildd@komainu) (gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) ) #38-Ubuntu SMP Tue May 1 16:18:50 UTC 2012 (Ubuntu 3.2.0-24.38-generic 3.2.16)
[    0.000000] Command line: BOOT_IMAGE=/vmlinuz-3.2.0-24-generic root=/dev/mapper/Apollo-root ro quiet rootdelay=35
[    0.000000] KERNEL supported cpus:
[    0.000000]   Intel GenuineIntel
[    0.000000]   AMD AuthenticAMD
[    0.000000]   Centaur CentaurHauls
[    0.000000] BIOS-provided physical RAM map:
[    0.000000]  BIOS-e820: 0000000000000000 - 00000000000a0000 (usable)
[    0.000000]  BIOS-e820: 0000000000100000 - 00000000cf379000 (usable)
[    0.000000]  BIOS-e820: 00000000cf379000 - 00000000cf38f000 (reserved)
[    0.000000]  BIOS-e820: 00000000cf38f000 - 00000000cf3ce000 (ACPI data)
[    0.000000]  BIOS-e820: 00000000cf3ce000 - 00000000d0000000 (reserved)
[    0.000000]  BIOS-e820: 00000000e0000000 - 00000000f0000000 (reserved)
[    0.000000]  BIOS-e820: 00000000fe000000 - 0000000100000000 (reserved)
[    0.000000]  BIOS-e820: 0000000100000000 - 0000000430000000 (usable)
[    0.000000] NX (Execute Disable) protection: active
[    0.000000] DMI 2.6 present.
[    0.000000] DMI: Dell Inc. PowerEdge R410/0WWR83, BIOS 1.9.0 10/21/2011
[    0.000000] e820 update range: 0000000000000000 - 0000000000010000 (usable) ==&gt; (reserved)
[    0.000000] e820 remove range: 00000000000a0000 - 0000000000100000 (usable)
[    0.000000] No AGP bridge found.....
</code></pre>

<p>命令显示linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。</p>

<h4>vmstat</h4>

<pre><code>$ vmstat 1
procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
4  0 2546312 255760 147032 610412    2    2     9    76    1    7 61  4 33  2
</code></pre>

<p>每行会输出一些系统核心指标，这些指标可以让我们更详细的了解系统状态。后面跟的参数1，表示每秒输出一次统计信息，表头提示了每一列的含义，这几介绍一些和性能调优相关的列</p>

<p>  r：等待在CPU资源的进程数。这个数据比平均负载更加能够体现CPU负载情况，数据中不包含等待IO的进程。如果这个数值大于机器CPU核数，那么机器的CPU资源已经饱和。 <br/>
  free：系统可用内存数（以千字节为单位），如果剩余内存不足，也会导致系统性能问题。下文介绍到的free命令，可以更详细的了解系统内存的使用情况。 <br/>
  si, so：交换区写入和读取的数量。如果这个数据不为0，说明系统已经在使用交换区（swap），机器物理内存已经不足。 <br/>
  us, sy, id, wa, st：这些都代表了CPU时间的消耗，它们分别表示用户时间（user）、系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen，一般被其他虚拟机消耗）。</p>

<h4>mpstat</h4>

<pre><code>$ mpstat -P ALL 1    
Linux 3.2.0-24-generic  01/28/2016  _x86_64_  (4 CPU)

09:29:33 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
09:29:34 PM  all   76.69    0.00    3.51    5.51    0.00    0.00    0.00    0.00   14.29
09:29:34 PM    0   99.01    0.00    0.99    0.00    0.00    0.00    0.00    0.00    0.00
09:29:34 PM    1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00
09:29:34 PM    2   48.98    0.00    6.12   13.27    0.00    0.00    0.00    0.00   31.63
09:29:34 PM    3   57.58    0.00    7.07   10.10    0.00    0.00    0.00    0.00   25.25
</code></pre>

<p>该命令可以显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的</p>

<h4>pidstat</h4>

<pre><code>$ pidstat 1                                                 
Linux 3.2.0-24-generic   01/28/2016  _x86_64_  (4 CPU)

09:31:23 PM       PID    %usr %system  %guest    %CPU   CPU  Command
09:31:24 PM      1046    0.00    0.99    0.00    0.99     2  kworker/2:2
09:31:24 PM      2513    0.99    2.97    0.00    3.96     2  node
09:31:24 PM     18578  200.99    0.00    0.00  200.99     1  java
09:31:24 PM     21124    0.99    0.00    0.00    0.99     2  java
09:31:24 PM     27197    0.00    1.98    0.00    1.98     2  pidstat
09:31:24 PM     27228    2.97    0.00    0.00    2.97     3  node
</code></pre>

<p>pidstat命令输出进程的CPU占用率，该命令会持续输出，并且不会覆盖之前的数据，可以方便观察系统动态。如上的输出，可以看见一个JAVA进程占用了将近200%的CPU时间，既消耗了大约2个CPU核心的运算资源。</p>

<h4>iostat</h4>

<pre><code>$ iostat -xz 1                                                                  
Linux 3.2.0-24-generic  01/28/2016  _x86_64_  (4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          60.65    0.01    4.03    2.38    0.00   32.92

Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
sda               0.85    19.84    4.07   32.00    35.01   300.28    18.60     0.70   19.37    4.74   21.23   5.05  18.20
dm-0              0.00     0.00    2.92   50.06    26.91   293.12    12.08     1.07   20.23    6.97   21.01   3.42  18.13
dm-1              0.00     0.00    2.02    1.79     8.09     7.16     8.00     1.75  459.97    6.14  972.71   0.70   0.27
</code></pre>

<p>iostat命令主要用于查看机器磁盘IO情况。该命令输出的列，主要含义是：</p>

<p>  r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。 <br/>
await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。 <br/>
  avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。 <br/>
  %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。</p>

<h4>free</h4>

<pre><code>$ free -m
         total       used       free     shared    buffers     cached
Mem:      16420044   16166340     253704          0     146060     611384
-/+ buffers/cache:   15408896    1011148
Swap:     11878396    2545148    9333248
</code></pre>

<p>free命令可以查看系统内存的使用情况</p>

<h4>sar</h4>

<pre><code>$ sar -n DEV 1
Linux 3.2.0-24-generic   01/28/2016  _x86_64_  (4 CPU)

09:39:12 PM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
09:39:13 PM        lo     47.00     47.00      5.09      5.09      0.00      0.00      0.00
09:39:13 PM      eth1      0.00      0.00      0.00      0.00      0.00      0.00      0.00
09:39:13 PM      eth0     26.00     36.00      3.23      3.01      0.00      0.00      1.00
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Capitan ruby-oci8 2.1.4 安装报错]]></title>
    <link href="http://huxinghai1988.github.com/blog/2016/01/01/el-capitan-ruby-oci8/"/>
    <updated>2016-01-01T16:31:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2016/01/01/el-capitan-ruby-oci8</id>
    <content type="html"><![CDATA[<p>升级MacOS El Capitan后安装oracle的ruby-oci8 2.1.4版本gem包报错信息如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Installing ruby-oci8 2.1.4 with native extensions
</span><span class='line'>
</span><span class='line'>  Gem::Ext::BuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>  /Users/huxinghai/.rvm/rubies/ruby-2.0.0-p643/bin/ruby -r ./siteconf20151231-1172-1r9gor0.rb extconf.rb
</span><span class='line'>  checking for load library path...
</span><span class='line'>  DYLD_LIBRARY_PATH is not set.
</span><span class='line'>  checking for cc... ok
</span><span class='line'>  checking for gcc... yes
</span><span class='line'>  checking for LP64... yes
</span><span class='line'>  checking for sys/types.h... yes
</span><span class='line'>  checking for ruby header... ok
</span><span class='line'>  Get the version of Oracle from SQL*Plus... 1120
</span><span class='line'>  try  -I/opt/oracle/instantclient_11_2/rdbms/public
</span><span class='line'>  checking for oci.h... no
</span><span class='line'>  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo
</span><span class='line'>  checking for oci.h... no
</span><span class='line'>  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo -I/opt/oracle/instantclient_11_2/network/public
</span><span class='line'>  checking for oci.h... no
</span><span class='line'>  try  -I/opt/oracle/instantclient_11_2/rdbms/public -I/opt/oracle/instantclient_11_2/rdbms/demo -I/opt/oracle/instantclient_11_2/network/public -I/opt/oracle/instantclient_11_2/plsql/public
</span><span class='line'>  checking for oci.h... no
</span><span class='line'>  *** extconf.rb failed ***
</span><span class='line'>  Could not create Makefile due to some reason, probably lack of necessary
</span><span class='line'>  libraries and/or headers.</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里面有一个重要的信息<code>DYLD_LIBRARY_PATH is not set</code>但是我在<code>~/.bash_profile</code>文件里面配置了DYLD_LIBRARY_PATH路径，我在终端<code>env | grep DYLD_LIBRARY_PATH</code>但是为空，后来我在终端<code>export DYLD_LIBRARY_PATH=/opt/oracle/instantclient_11_2</code>还是为空，但是export其它的环境变量都有值，后来查资料看到一个El Capitan SIP（System Integrity Protection）这个词，google了一个SIP才明白是El Capitan版本的一个安全策略, SIP把DYLD_LIBRARY_PATH保护起来了，所以的把SIP关闭才可以正常设置DYLD_LIBRARY_PATH, 关闭SIP后export DYLD_LIBRARY_PATH变量就成功了。</p>

<p><a href="http://apple.stackexchange.com/questions/208478/how-do-i-disable-system-integrity-protection-sip-aka-rootless-on-os-x-10-11">关闭SIP步骤</a></p>

<ol>
<li>重启系统, 在启动时候按<code>Command+R</code>进入恢复模式图形界面</li>
<li>点击<code>使用工具</code> > <code>Terminal</code></li>
<li>在终端输入<code>csrutil disable</code>命令按回车，会提示是否成功</li>
<li>重启系统</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[元编程Ruby2.0 Module#refine]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/11/08/module-refine/"/>
    <updated>2015-11-08T00:00:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/11/08/module-refine</id>
    <content type="html"><![CDATA[<p>没有看元编程第二版之前还不知道Module有<strong><em>refine</em></strong>特效，可以将一个class重新打开定义方法
然后使用using生效，这样不会影响原有class，下面我们看看这个案例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">FooBar</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> says : Hello, world&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">FooBar</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ruby&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span>
</span></code></pre></td></tr></table></div></figure>


<p>String.new.say调用会报错， 因为say只在Bar类里面生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emberjs2 自定义adapter方法与json序列化model]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/09/22/emberjsguide/"/>
    <updated>2015-09-22T21:50:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/09/22/emberjsguide</id>
    <content type="html"><![CDATA[<ol>
<li><p>自定义adapter请求服务器</p>

<p> 有时候model CURD 满足不了我们的需求，需要自己定义方法请求服务器，我们可以把这种方法定义adapter
代码如下：</p>

<pre><code>App.UserAdapter = App.ApplicationAdapter.extend({
  createRelation: function(opts){
    var url = [this.urlPrefix(), "users", "/pass"].join("/")
    return this.ajax(url, "POST", {data: opts})  
  }
})
</code></pre>

<p>controller调用</p>

<pre><code>var adapter = this.store.adapterFor("user");
adapter.createRelation({status: 1}).then(function(){
  // success
}, function(){
  // catch
})
</code></pre></li>
<li><p>json序列化model</p></li>
</ol>


<p>  <code>
  this.store.push(this.store.normalize("user", {id: 1, name: 'xxxxxxxxx'}))
 </code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emberjs 2.0 遇到一个坑]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/09/12/emberjs-pit/"/>
    <updated>2015-09-12T11:52:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/09/12/emberjs-pit</id>
    <content type="html"><![CDATA[<p>最近项目使用emberjs 2.0版本，本身用2.0是比较纠结的事，由于之前就是只闻其术，不见其码，而且emberjs 1.x版本到2.0 做了一次无痛升级，之前用backbone框架感觉有些概念还是一样的，先说说用的emberjs 第一个坑贴代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="c1">//controller js 文件</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">tag</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s2">&quot;tag&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;newName&quot;</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">tag</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">that</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">that</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;newName&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}(</span><span class="k">this</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">that</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">tag</span><span class="p">.</span><span class="nx">rolledBack</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">tag</span><span class="p">.</span><span class="nx">unloadRecord</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">that</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;errors&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">errors</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>tag 当我不管成功与失败template 多会加载这数据，我想在save失败不加载到template所以要加一个<strong>rolledBack</strong>和<strong>unloadRecord</strong>失败的时候就不加载了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用pomelo做聊天服务器分配connector服务使用http分配]]></title>
    <link href="http://huxinghai1988.github.com/blog/2015/01/11/pomelo-gate-http/"/>
    <updated>2015-01-11T10:10:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2015/01/11/pomelo-gate-http</id>
    <content type="html"><![CDATA[<p>如果使用pomelo默认的gate分配很慢, 因为socket去连接服务，然后disconnect再连接connector
服务器这过程就会拖慢用户连接时间，使用http方便而且快。</p>

<p>pomelo 本身支持Plugin扩展，已经有人用express写了<a href="https://github.com/pipi32167/pomelo-http-plugin">pomelo-http</a>插件了, 插件存在一个问题定义post请求拿不到参数, <em>body-parser</em>使用可以解决这个问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">dispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../../../util/dispatcher&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">http</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/system/dispatcher&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">c_type</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">c_type</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">uid</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">uuid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">c_type</span> <span class="o">=</span> <span class="p">(</span><span class="nx">c_type</span> <span class="o">&amp;&amp;</span> <span class="nx">c_type</span><span class="o">===</span><span class="s1">&#39;mqtt&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;mqtt-connector&#39;</span> <span class="o">:</span> <span class="s1">&#39;sio-connector&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">connectors</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">getServersByType</span><span class="p">(</span><span class="nx">c_type</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">dispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">uid</span><span class="p">,</span> <span class="nx">connectors</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">403</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;not invalid server connectors!!!&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="nx">host</span><span class="o">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span> <span class="nx">port</span><span class="o">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">clientPort</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pomelo centOs 环境部署]]></title>
    <link href="http://huxinghai1988.github.com/blog/2014/12/11/pomelo-deploy/"/>
    <updated>2014-12-11T23:44:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2014/12/11/pomelo-deploy</id>
    <content type="html"><![CDATA[<p>pomelo强大的可伸缩性和灵活性使得pomelo也可以作为通用的分布式实时应用开发框架，用于一些高实时应用的开发，而且pomelo在很多方面的表现甚至超越了现有的开源实时应用框架</p>

<p>由于pomelo 依赖node-gyp这modules所以有点麻烦,安装之前配置python环境，官方推荐版本2.7</p>

<pre><code>npm config set python /usr/local/bin/python2.7

npm install -g node-gyp

npm install -g pomelo 

pomelo start -e production --daemon

//host 与 port 是master地址
pomelo stop --host 172.0.0.1 --port 4005
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby bundle gem的配置]]></title>
    <link href="http://huxinghai1988.github.com/blog/2014/12/10/bundle-config/"/>
    <updated>2014-12-10T14:11:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2014/12/10/bundle-config</id>
    <content type="html"><![CDATA[<p>在项目里我们用的比较多的bundle install当遇到一些gem包环境问题时，在安装gem时需要加一些配置
比如：</p>

<pre><code>gem install pg -v '0.12.0' -- --with-pg-config=/usr/pgsql-9.1/bin/pg_config
</code></pre>

<p>但是当我们要把pg加入Gemfile文件时，后面的配置怎么设置，这个时候我们要用到bundle config的东西，可以在bundle
读取相应的配置, 我们可以如下设置：</p>

<pre><code>bundle config build.pg --with-pg-config=/usr/pgsql-9.1/bin/pg_config
</code></pre>

<p>bundle config 详解：</p>

<pre><code>#查看配置
bundle config

#查看某种name的配置
bundle config NAME

#设置值
bundle config NAME VALUE

#设置全局
bundle config --global NAME VALUE

#设置当前目录下
bundle config --local NAME VALUE 

#删除一个配置
bundle config --delete NAME
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails调用oracle的存储过程]]></title>
    <link href="http://huxinghai1988.github.com/blog/2014/08/21/oracle-call-stored-procedure/"/>
    <updated>2014-08-21T00:41:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2014/08/21/oracle-call-stored-procedure</id>
    <content type="html"><![CDATA[<p>调用方式如下：</p>

<pre><code>cursor = ActiveRecord::Base.connection.raw_connection.parse("BEGIN MYPROC(:age, :name, :fathers_age, :capital_name); END;")
cursor.bind_param(:name, 'akshay')
cursor.bind_param(:age, '20')
cursor.bind_param(:fathers_age, nil, Fixnum)
cursor.bind_param(:capital_name, nil, String, 20)
cursor.exec()
p cursor[:fathers_age], cursor[:capital_name]


require 'sequel'
db = Sequel.connect(:adapter=&gt;'oracle', :host=&gt;'localhost', :database=&gt;'db_name', :user=&gt;'test', :password=&gt;'test')
db.execute("begin MYPROC(:age, :name, :fathers_age, :capital_name); end;", {:arguments =&gt; [[20, "integer"], ["akshay", "string"], [nil, "integer"], [nil, "string"]]}) { |cursor| [cursor[3], cursor[4]] }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby根据不同的异常处理不同事件]]></title>
    <link href="http://huxinghai1988.github.com/blog/2014/07/28/rails-raise/"/>
    <updated>2014-07-28T23:39:00+08:00</updated>
    <id>http://huxinghai1988.github.com/blog/2014/07/28/rails-raise</id>
    <content type="html"><![CDATA[<p>在一个<em>class</em>里面你想根据不同的异常回调不同事件</p>

<pre><code>class NoMoneyException &lt; StandardError
end

class ValidNumberException &lt; StandardError
end

class Sale

    def self.create(options)
        obj = new(options)
        obj.validation
    end

    def validation

        raise NoMoneyException if money &gt; current_user.money
        raise ValidNumberException if number &gt; warehouse.nventory
    end
end


begin
    Sale.create({...})
rescue NoMoneyException =&gt; e
    callback ..
rescue ValidNumberException =&gt; e
    callback ..
end
</code></pre>
]]></content>
  </entry>
  
</feed>
